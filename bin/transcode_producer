#!/usr/bin/env ruby

# Copyright (c) 2012 Ryan J. Geyer
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

require 'trollop'
require 'json'

require File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'transcode_producer'))

opts = Trollop::options do
  banner = "A simple job producer for a batch video transcoding grid application"

  opt :amqp_host, "A hostname for the AMQP server", :type => :string, :required => true
  opt :amqp_username, "A username to authenticate with the AMQP server", :type => :string
  opt :amqp_password, "A password to authenticate with the AMQP server", :type => :string
  opt :input_queue_name, "The name of the input queue on the AMQP server", :default => 'encode_input'
  #opt :input_bucket, "The Google Storage bucket to retrieve the source video files", :type => :string,
  opt :input_url, "The URL of an RSS feed containing a media_content_url parameter which is a video link", :type => :string
  opt :output_bucket, "The name of the Google Storage bucket to upload the transcoded files to", :type => :string
  opt :output_path, "A local filesystem path on the Consumer node where the transcoded files will be saved to", :type => :string
  opt :handbrake_preset, "The name of one or many HandBrake presets to use for transcoding videos", :type => :strings, :multi => true, :required => true
end

#if !opts[:input_bucket] && !opts[:input_url]
if !opts[:input_url]
  Trollop::die :input_url, "Please specify an --input-url argument for the source file(s)"
end

if ! opts[:output_bucket] && ! opts[:output_path]
  Trollop::die :output, "Please specify an ouput argument for the transcoded file(s)"
end

if opts[:output_bucket] && opts[:output_path]
  Trollop::die :output, "Sorry, only one ouput argument is currently supported."
end

producer_opts = opts

producer_opts[:user] = opts[:amqp_username] if opts[:amqp_username]
producer_opts[:pass] = opts[:amqp_password] if opts[:amqp_password]

producer = RGeyer::TranscodeProducer.new(opts[:amqp_host], producer_opts)
added_count = 0

#if opts[:input_bucket]
#  producer.list_gstore_objects(opts[:input_bucket]).each do |obj|
#   ...
#  end
#end

if opts[:input_url]
  output = opts[:output_bucket] || opts[:output_path] # XXX
  preset = opts[:handbrake_preset]
  producer.list_rss_objects(opts[:input_url]).each do |obj|
    producer.publish_to_amqp({
      :type => 'rss',
      :object => obj,
      :output => output,
      :handbrake_presets => preset
    }.to_json)
    added_count += 1
  end
end

input_queue_status = producer.get_input_queue_status
puts "Added #{added_count} jobs to be processed, there are now #{input_queue_status[:message_count]} jobs in the input queue"
